name: Build and Push Docker Images

on:
  push:
    branches:
      - main

jobs:
  unit_test_node:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - frontend
          - worker
    defaults:
      run:
        working-directory: microservices/${{ matrix.service }}
    name: Node ${{ matrix.service }} unit test
    services:
      database:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

      redis:
        image: redis:alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        continue-on-error: true
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - run: npm ci
      - run: yarn install
      - run: yarn test

  unit_test_python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - backend
    defaults:
      run:
        working-directory: microservices/backend
    name: Python ${{ matrix.service }} unit test
    services:
      database:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

      redis:
        image: redis:alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        continue-on-error: true
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip -r requirements.txt
      - name: Run tests
        run: | 
          pip install pytest pytest-cov
          pytest tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

  security_img_scan:
    runs-on: ubuntu-latest
    needs: [unit_test_python, unit_test_node]
    strategy:
      matrix:
        service:
          - frontend
          - backend
          - worker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Security scan
        uses: docker://aquasec/trivy:0.19.2
        with:
          args: --exit-code 1 --severity HIGH,CRITICAL docker.io/${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{ github.sha }}

  release_generate:
    needs: security_img_scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Run semantic release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npx semantic-release

  build_and_push:

    needs: release_generate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - frontend
          - backend
          - worker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: .
          file: ./microservices/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            docker.io/${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{ github.sha }}
            docker.io/${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{ env.VERSION }}
            docker.io/${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

name: Build and Push Docker Images

on:
  push:
    branches:
      - main

jobs:
  unit_test_node:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        service:
          - frontend
          - worker
    defaults:
      run:
        working-directory: microservices/${{ matrix.service }}
    name: Node ${{ matrix.service }} unit test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - run: npm ci
      - run: yarn install
      - run: yarn test

  unit_test_python:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        service:
          - backend
    defaults:
      run:
        working-directory: microservices/backend
    name: Python ${{ matrix.service }} unit test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
      - name: Run tests
        run: | 
           python -m unittest -v

  security_img_scan:
    runs-on: ubuntu-latest
    needs: [unit_test_python, unit_test_node]
    strategy:
      matrix:
        service:
          - frontend
          - backend
          - worker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build images 
        run: |
          docker build -t docker.io/${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{ github.sha }} -f microservices/${{ matrix.service }}/Dockerfile .
      
      - name: Security scan
        uses: docker://aquasec/trivy:0.19.2
        with:
          args: --exit-code 1 --severity HIGH,CRITICAL docker.io/${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{ github.sha }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          #severity: 'CRITICAL,HIGH'
        continue-on-error: true  

  release_generate:
    needs: security_img_scan
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic_release.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: |
          npm ci
          npm install

      - name: Run semantic release
        id: semantic_release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          OUTPUT=$(npx semantic-release --dry-run --output)
          echo "::set-output name=version::$OUTPUT"
          export TAG_VERSION=$(npx semantic-release --dry-run | grep 'The next release version is' | sed -E 's/.* ([[:digit:].]+)$/\1/')
          echo 'TAG_VERSION='$TAG_VERSION

      - name: Use output version
        id: version
        run: echo "${{ steps.semantic_release.outputs.version }}"

  build_and_push:

    needs: release_generate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - frontend
          - backend
          - worker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        id: docker_login
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          context: .
          file: ./microservices/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            docker.io/${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{needs.release_generate.outputs.version}}  
            docker.io/${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest